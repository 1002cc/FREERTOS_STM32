#include "key.h"

void key_init(void)
{
    GPIO_InitTypeDef GPIO_InitStructture;

    //定义按键 PA0
    GPIO_InitStructture.GPIO_Pin = GPIO_Pin_0; 			//设置引脚
    GPIO_InitStructture.GPIO_Mode = GPIO_Mode_IN;		//响应模式
    GPIO_InitStructture.GPIO_PuPd = GPIO_PuPd_NOPULL; 	//没有使能上拉/下拉电阻
    GPIO_Init( GPIOA, &GPIO_InitStructture );
    //定义其他按键PE2 PE3 PE4
    GPIO_InitStructture.GPIO_Pin = GPIO_Pin_2 | GPIO_Pin_3 | GPIO_Pin_4;
    GPIO_Init( GPIOE, &GPIO_InitStructture );

}

unsigned int key_scan(unsigned int mode)
{
    static unsigned int key_up = 1; //按键按松开标志
    if(mode)key_up = 1;
    if(key_up && (KEY_S1 == 0x00 || KEY_S2 == 0x00 || KEY_S3 == 0x00 || KEY_S4 == 0x00))
    {
        delay1ms(40);
        key_up = 0;
        if(KEY_S1 == 0x00)return 1;
        else if(KEY_S2 == 0x00)return 2;
        else if(KEY_S3 == 0x00)return 3;
        else if(KEY_S4 == 0x00)return 4;

    } else if(KEY_S1 == 0x00 || KEY_S2 == 0x00 || KEY_S3 == 0x00 || KEY_S4 == 0x00)key_up = 1;
    return 0;
}

unsigned char KTY_SCAN(void)
{
    static unsigned char KEY_oldvalue = 0x0F;
    unsigned char KEY_pres = 0x00;
    //按键1
    if(KEY_S1 == 0 )
    {
        if(KEY_oldvalue & 0x01)
        {
            KEY_pres |= 0x01;
            KEY_oldvalue &= ~0x01;
            delay1ms(40);
        }
    } else
    {
        if(!(KEY_oldvalue & 0x01))
        {
            KEY_oldvalue |= 0x01;
            delay1ms(40);
        }
    }
    //按键2
    if(KEY_S2 == 0 )
    {
        if(KEY_oldvalue & 0x02)
        {
            KEY_pres |= 0x02;
            KEY_oldvalue &= ~0x02;

            delay1ms(40);
        }
    }
    else//检测到高电平
    {
        if(!(KEY_oldvalue & 0x02))
        {
            KEY_oldvalue |= 0x02;
            delay1ms(40);
        }
    }

    //按键3
    if(KEY_S3 == 0 )
    {
        if(KEY_oldvalue & 0x04)
        {
            KEY_pres |= 0x04;
            KEY_oldvalue &= ~0x04;
            delay1ms(40);
        }
    }
    else
    {
        if(!(KEY_oldvalue & 0x04))
        {

            KEY_oldvalue |= 0x04;
            delay1ms(40);
        }
    }

    //按键4
    if(KEY_S4 == 0 )
    {
        if(KEY_oldvalue & 0x08)
        {
            KEY_pres |= 0x08;
            KEY_oldvalue &= ~0x08;
            delay1ms(40);
        }
    }
    else
    {
        if(!(KEY_oldvalue & 0x08))
        {
            KEY_oldvalue |= 0x08;
            delay1ms(40);
        }
    }

    return KEY_pres;
}


void delay1ms(uint c)
{
    unsigned char a, b;
    for(; c > 0; c--)
        for(b = 142; b > 0; b--)
            for(a = 2; a > 0; a--);
}

void KEY_EXTIInit(void)
{
    //PA0 PE2 PE3 PE4
    EXTI_InitTypeDef EXTI_InitStruct;
    NVIC_InitTypeDef NVIC_InitStruct;
	
    RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA | RCC_AHB1Periph_GPIOE, ENABLE);
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);

    //引脚初始化 PA0 PE2 PE3 PE4
	GPIO_InitTypeDef GPIO_InitStructture;

    //定义按键 PA0
    GPIO_InitStructture.GPIO_Pin = GPIO_Pin_0; 			//设置引脚
    GPIO_InitStructture.GPIO_Mode = GPIO_Mode_IN;		//响应模式
    GPIO_InitStructture.GPIO_PuPd = GPIO_PuPd_NOPULL; 	//没有使能上拉/下拉电阻
    GPIO_Init( GPIOA, &GPIO_InitStructture );
    //定义其他按键PE2 PE3 PE4
    GPIO_InitStructture.GPIO_Pin = GPIO_Pin_2 | GPIO_Pin_3 | GPIO_Pin_4;
    GPIO_Init( GPIOE, &GPIO_InitStructture );
	
	//分组优先级
	NVIC_PriorityGroupConfig(NVIC_PriorityGroup_2);

    //中断检测线路连接
    SYSCFG_EXTILineConfig(EXTI_PortSourceGPIOA, EXTI_PinSource0);
    SYSCFG_EXTILineConfig(EXTI_PortSourceGPIOE, EXTI_PinSource2);
    SYSCFG_EXTILineConfig(EXTI_PortSourceGPIOE, EXTI_PinSource3);
    SYSCFG_EXTILineConfig(EXTI_PortSourceGPIOE, EXTI_PinSource4);


    //初始化中断 PA0
    EXTI_InitStruct.EXTI_Line = EXTI_Line0 | EXTI_Line2 | EXTI_Line3 | EXTI_Line4; //选择指定的中断线 0~22
    EXTI_InitStruct.EXTI_Mode = EXTI_Mode_Interrupt; //模式 事件模式/中断模式 默认中断模式
    EXTI_InitStruct.EXTI_Trigger = EXTI_Trigger_Rising; //触发方式 下降沿触发 上升沿触发 边沿触发
    EXTI_InitStruct.EXTI_LineCmd = ENABLE; //使能  ENABLE/DISENABLE
    EXTI_Init(&EXTI_InitStruct);

    //设置优先级
    NVIC_InitStruct.NVIC_IRQChannel = EXTI0_IRQn;
    NVIC_InitStruct.NVIC_IRQChannelPreemptionPriority = 1;
    NVIC_InitStruct.NVIC_IRQChannelSubPriority = 1;
    NVIC_InitStruct.NVIC_IRQChannelCmd = ENABLE;
    NVIC_Init(&NVIC_InitStruct);

    NVIC_InitStruct.NVIC_IRQChannel = EXTI2_IRQn;
    NVIC_InitStruct.NVIC_IRQChannelPreemptionPriority = 2;
    NVIC_InitStruct.NVIC_IRQChannelSubPriority = 2;
    NVIC_InitStruct.NVIC_IRQChannelCmd = ENABLE;
    NVIC_Init(&NVIC_InitStruct);

    NVIC_InitStruct.NVIC_IRQChannel = EXTI3_IRQn;
    NVIC_InitStruct.NVIC_IRQChannelPreemptionPriority = 4;
    NVIC_InitStruct.NVIC_IRQChannelSubPriority =4 ;
    NVIC_InitStruct.NVIC_IRQChannelCmd = ENABLE;
    NVIC_Init(&NVIC_InitStruct);

    NVIC_InitStruct.NVIC_IRQChannel = EXTI4_IRQn;
    NVIC_InitStruct.NVIC_IRQChannelPreemptionPriority = 5;
    NVIC_InitStruct.NVIC_IRQChannelSubPriority = 5;
    NVIC_InitStruct.NVIC_IRQChannelCmd = ENABLE;
    NVIC_Init(&NVIC_InitStruct);
}
unsigned int flag=0;
void EXTI0_IRQHandler(void)
{
	delay1ms(40);
	flag++;
    GPIO_ToggleBits(GPIOF, GPIO_Pin_9);
   
	
	//清除标志位
    EXTI_ClearITPendingBit(EXTI_Line0);
}

void EXTI2_IRQHandler(void)
{
	delay1ms(40);
	flag--;
    GPIO_ToggleBits(GPIOF, GPIO_Pin_10);

	
    EXTI_ClearITPendingBit(EXTI_Line2);
}


void EXTI3_IRQHandler(void)
{
	delay1ms(40);
	flag=0;
    GPIO_ToggleBits(GPIOE, GPIO_Pin_13);
	
    EXTI_ClearITPendingBit(EXTI_Line3);

}

void EXTI4_IRQHandler(void)
{
	delay1ms(40);
    GPIO_ToggleBits(GPIOE, GPIO_Pin_14);

    EXTI_ClearITPendingBit(EXTI_Line4);
}

void Counter(void)
	
{	if(flag==0||flag==16)
	{
		GPIO_WriteBit(GPIOF,GPIO_Pin_9 | GPIO_Pin_10,Bit_SET);
		GPIO_WriteBit(GPIOE,GPIO_Pin_13 | GPIO_Pin_14,Bit_SET);
	}
	if(flag & 0x01)
	{
		GPIO_ToggleBits(GPIOF, GPIO_Pin_9);
	}
	if(flag & 0x02)
	{
GPIO_ToggleBits(GPIOF, GPIO_Pin_10);
	}
	if(flag & 0x04)
	{
GPIO_ToggleBits(GPIOE, GPIO_Pin_13);
	}
	if(flag & 0x08)
	{
GPIO_ToggleBits(GPIOE, GPIO_Pin_14);
	}

}
